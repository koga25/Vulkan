Notes about vulkan

Vulkan Instance: it is the connection between the application and the vulkan library.

Vulkan Structs: a lot of information in vulkan is passed in structs, generally we create an Vk-VulkanPart-Info and then we 
create the VulkanPart with Vk-VulkanPart-CreateInfo.

Validation Layers: Optional components that we implement to apply additional operations like:
		*Checking the values of parameters against the specification to detect misuse
		*Tracking creation and destruction of objects to find resource leaks
		*Checking thread safety by tracking the threads that calls originate from
		*Logging every call and its parameters to the standard output
		*Tracing Vulkan calls for profiling and replaying

Physical device: The gpus that the computer have. It will have features that we can filter and use in our application

Logical Device: the application view of the physical device, we use the logical device to interact with the application.
				there is no need to limit the application to only one logical device, we can create multiple instances of
				the logical device even if we only have one gpu. This is useful if we have varying requirements. In the
				creation of a logical device we need to specify which queues we will submit our work to.

Queue: Almost every operation in vulkan need to be submited to a queue, in example, drawing or uploading textures. Everything
	   in the queue is serialized, only one thread can submit work to a queue but different threads can submit work to different
	   Queues.

Queue Families: this describes the set of queues with the same properties, for example we can have 16 queues that can do
				compute and drawing. 

Window surface: the function of the surface is to make a way to enable the Vulkan api (a platform agnostic api) to interact
			    with the window.